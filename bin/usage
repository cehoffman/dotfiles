#!/usr/bin/env lua
shell = {}

function shell.escape(...)
  local command = type(...) == 'table' and ... or { ... }
  for i, s in ipairs(command) do
    command[i] = ("%q"):format(s)
  end
  return table.concat(command, ' ')
end

function shell.lines(...)
 return assert(io.popen(shell.escape(...) .. ' 2>&1')):lines()
end

function string:split(pat, num)
  -- allow giving number of splits without a pattern
  if not num and type(pat) == 'number' then pat, num = nil, pat end
  pat, num = pat or '%s', num or math.huge

  local matches, subsplit = 0

  -- This special cases empty search pattern
  if pat == '' then
    local length = #self
    subsplit = function(idx)
      matches = matches + 1
      if matches > num then return coroutine.yield(self:sub(idx, -1)) end

      local start, stop = self:find(pat, idx)
      if stop < start then stop, start = start, start + 1 end
      coroutine.yield(self:sub(idx, (start or 0) - 1))
      if stop < length then return subsplit(stop + 1) end
    end
  else
    subsplit = function(idx)
      matches = matches + 1
      if matches > num then return coroutine.yield(self:sub(idx, -1)) end

      local start, stop = self:find(pat, idx)
      coroutine.yield(self:sub(idx, (start or 0) - 1))
      if stop then return subsplit(stop + 1) end
    end
  end

  return coroutine.wrap(function() subsplit(1) end)
end

function math.round(val, step)
  step = step or 1
  return math.floor(((val + step / 2) / step) * step)
end

table.unpack = unpack or table.unpack
local ffi = require "ffi"
setmetatable(_G, {__index = ffi.C})
ffi.cdef "int usleep(uint64_t)"

local function sum(t)
  local sum = 0
  for i, val in pairs(t) do sum = sum + val end
  return sum
end

if ffi.os == 'OSX' then
  PROCESSOR_CPU_LOAD_INFO = 2
  HOST_VM_INFO = 2
  KERN_SUCCESS = 0

  -- mach header files really are a mess of typedefs to be pretty
  ffi.cdef [[
    typedef int integer_t;
    typedef unsigned int __darwin_natural_t;
    typedef __darwin_natural_t natural_t;
    typedef natural_t mach_port_name_t;
    typedef mach_port_name_t mach_port_t;

    typedef int kern_return_t;
    typedef mach_port_t host_t;
    typedef int processor_flavor_t;
    typedef integer_t * processor_info_array_t;
    typedef natural_t mach_msg_type_number_t;
    typedef mach_port_t vm_map_t;
    typedef natural_t vm_offset_t;
    typedef vm_offset_t vm_address_t;
    typedef natural_t vm_size_t;
    typedef integer_t host_flavor_t;
    typedef integer_t * host_info_t;

    mach_port_t mach_host_self();
    mach_port_t mach_task_self();

    /* Used to get information on processor usage */
    kern_return_t host_processor_info(host_t,
                                      processor_flavor_t,
                                      natural_t *,
                                      processor_info_array_t *,
                                      mach_msg_type_number_t *);

    /* host_processor_info returns an allocated object that must be freed */
    kern_return_t vm_deallocate(vm_map_t,
                                vm_address_t,
                                vm_size_t);

    /* This can return memory or load average data */
    kern_return_t host_statistics(host_t,
                                  host_flavor_t,
                                  host_info_t,
                                  mach_msg_type_number_t *);

    /**
     * These structures are mine and used for easy access to returned
     * information from the above calls.
     **/
    typedef struct {
      integer_t free;
      integer_t active;
      integer_t inactive;
      integer_t wire;
      integer_t unused[8]; // required otherwise call fails
    } vm_statistics;

    typedef struct {
      integer_t user;
      integer_t system;
      integer_t idle;
      integer_t nice;
    } cpu_statistics;
  ]]

  ffi.load("/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation", true)
  ffi.load("/System/Library/Frameworks/IOKit.framework/IOKit", true)
  ffi.cdef [[
    struct __CFArray {};
    struct __CFDictionary {};
    struct __CFNumber {};
    struct __CFString {};
    typedef signed long CFIndex;
    typedef unsigned char Boolean;
    typedef const void * CFTypeRef;
    typedef const struct __CFArray * CFArrayRef;
    typedef const struct __CFDictionary * CFDictionaryRef;
    typedef const void * CFAllocatorRef;
    typedef const struct __CFString * CFStringRef;
    typedef const struct __CFNumber * CFNumberRef;

    void CFRelease(CFTypeRef);

    typedef CFIndex CFNumberType; enum {
      /* Fixed-width types */
      kCFNumberSInt8Type = 1,
      kCFNumberSInt16Type = 2,
      kCFNumberSInt32Type = 3,
      kCFNumberSInt64Type = 4,
      kCFNumberFloat32Type = 5,
      kCFNumberFloat64Type = 6,   /* 64-bit IEEE 754 */
      /* Basic C types */
      kCFNumberCharType = 7,
      kCFNumberShortType = 8,
      kCFNumberIntType = 9,
      kCFNumberLongType = 10,
      kCFNumberLongLongType = 11,
      kCFNumberFloatType = 12,
      kCFNumberDoubleType = 13,
      /* Other */
      kCFNumberCFIndexType = 14,
      kCFNumberNSIntegerType = 15,
      kCFNumberCGFloatType = 16,
      kCFNumberMaxType = 16
    };

    typedef CFIndex CFStringEncoding; enum {
      kCFStringEncodingASCII = 0x0600,
      kCFStringEncodingUTF8 = 0x08000100,
    };

    CFStringRef __CFStringMakeConstantString(const char *);
    Boolean CFStringGetCString(CFStringRef, char *, CFIndex, CFStringEncoding);

    const void * CFDictionaryGetValue(CFDictionaryRef, const void *);

    Boolean CFNumberGetValue(CFNumberRef, CFNumberType, void *);

    CFIndex CFArrayGetCount(CFArrayRef);
    const void * CFArrayGetValueAtIndex(CFArrayRef, CFIndex);

    CFTypeRef IOPSCopyPowerSourcesInfo();
    CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef);
    CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef, CFTypeRef);
  ]]

  YES = ffi.new('Boolean', 1)
  NO = ffi.new('Boolean', 0)

  ffi.metatype("struct __CFArray", {
    __len = function(self) return tonumber(CFArrayGetCount(self)) end,
    __call = function(...) print(table.unpack({...})) end,
    __index = function(self, i) return CFArrayGetValueAtIndex(self, i) end
  })

  ffi.metatype('struct __CFDictionary', {
    __call = function(self, k, cast)
      local val = ffi.cast(cast, self[k])
      return cast:find('Ref$') and val[0] or val
    end,
    __index = function(self, k) return CFDictionaryGetValue(self, CFSTR(k)) end,
  })

  ffi.metatype('struct __CFNumber', {
    __call = function(self, _)
      local number = ffi.new('double[1]', 0)
      CFNumberGetValue(self, kCFNumberDoubleType, number)
      return number[0]
    end,
    __tonumber = function()print(blah)end
  })

  local cstring = ffi.new('char[255]')
  ffi.metatype('struct __CFString', {
    __call = function(self) return tostring(self) end,
    __tostring = function(self)
      CFStringGetCString(self, cstring, ffi.sizeof(cstring), kCFStringEncodingUTF8)
      return ffi.string(cstring)
    end
  })

  CFSTR = __CFStringMakeConstantString;
end

local top = {}
setmetatable(top, {
  __index = function(self, k)
    for line in shell.lines{'top', '-R', '-F', '-l1', '-n0', '-s0'} do
      local key, value = line:match('^([%w%s]+):%s*(.+)')
      if key then self[key:lower()] = value end
    end

    -- don't call top again by accident
    setmetatable(self, {})

    return self[k]
  end
})

local cpu_usage = {
  OSX = function()
    local num_cpu = ffi.new("natural_t[1]")
    local cpu_info = ffi.new('cpu_statistics *[1]')
    local num_cpu_info = ffi.new("mach_msg_type_number_t[1]")

    local used, idle

    if host_processor_info(mach_host_self(),
                           PROCESSOR_CPU_LOAD_INFO,
                           num_cpu,
                           ffi.cast('processor_info_array_t *', cpu_info),
                           num_cpu_info) == KERN_SUCCESS then
      for i = 0, num_cpu[0] - 1 do
        used = cpu_info[0][i].user + cpu_info[0][i].system + cpu_info[0][i].nice
        idle = cpu_info[0][i].idle
      end

      if vm_deallocate(mach_task_self(),
                       ffi.cast('vm_address_t', cpu_info[0]),
                       ffi.sizeof('natural_t') * num_cpu_info[0]) ~= KERN_SUCCESS then

        io.stderr:write('Failed deallocating cpu info\n')
        os.exit(1)
      end
    end

    return idle, idle + used
  end,
  Linux = function()
    local stat, stats, total, idle = io.open('/proc/stat', 'r'), {}

    for line in stat:lines() do
      if line:find("^cpu%s+%d+") then
        for stat in line:split() do table.insert(stats, tonumber(stat)) end

        total, idle = sum(stats), stats[4]

        break
      end
      ::next::
    end

    stat:close()

    return idle, total
  end
}

local function usage()
  if cpu_usage[ffi.os] then
    local diff, prev = {}, {}

    for i = 1, 0, -1 do
      local idle, total = cpu_usage[ffi.os]()

      diff.idle = idle - (prev.idle or 0)
      diff.total = total - (prev.total or 0)
      diff.usage = (diff.total - diff.idle) / diff.total

      prev.idle, prev.total = diff.idle, diff.total

      usleep(i * 500000)
    end
    return diff.usage
  else
    for str in top["cpu usage"]:split("%s*,%s*") do
      local stat, name = str:match("([%d%.]+)%%%s+(%w+)")
      if name == "idle" then return 1 - stat / 100 end
    end
  end
end

local function memory()
  local mem, stat = {}, io.open('/proc/meminfo', 'r')
  if stat then
    local names = {'MemFree', 'Cached', 'SwapCached', 'Active', 'Inactive'}
    for line in stat:lines() do
      for _, test in ipairs(names) do
        local size = line:match('^' .. test .. ":%s*(%d+)")
        if size then mem[test:sub(0, 1):lower()] = tonumber(size) end
      end
    end

    mem.c, mem.s = mem.c + mem.s, nil
    mem.f, mem.m = mem.m, nil

    stat:close()
  elseif ffi.os == 'OSX' then
    local mem_info = ffi.new('vm_statistics')

    -- it is important to realize this value is in terms of natural_t, i.e. it
    -- takes sizeof(natural_t) times this number to get the number of bytes used
    local mem_info_count = ffi.new('mach_msg_type_number_t[1]',
                                    ffi.sizeof(mem_info) / ffi.sizeof('natural_t'))

    local err = host_statistics(mach_host_self(),
                                HOST_VM_INFO,
                                ffi.cast('host_info_t', mem_info),
                                mem_info_count)
    if err == KERN_SUCCESS then
      mem.f, mem.w = mem_info.free, mem_info.wire
      mem.a, mem.i = mem_info.active, mem_info.inactive
    else
      io.stderr:write("failed getting memory info\n")
      os.exit(1)
    end
  else
    local units = {
      K = 1,
      M = 1024,
      G = 1024 * 1024
    }

    for str in top.physmem:split("%s*,%s*") do
      local val, unit, type = str:match("(%d+)([KMG])%s+(%w)")
      mem[type] = val * units[unit]
    end

    mem.u = nil
  end

  return mem
end

local battery = {
  OSX = function()
    local capacity, time, charging
    local blob = IOPSCopyPowerSourcesInfo()
    local sources = IOPSCopyPowerSourcesList(blob)[0]

    for i = 0, #sources - 1 do
      local source = IOPSGetPowerSourceDescription(blob, sources[i])[0]
      if not source then break end

      capacity = source("Current Capacity", 'CFNumberRef')() /
                 source("Max Capacity", 'CFNumberRef')()

      charging = source("Is Charging", 'Boolean') == YES
      if not charging then
        time = source("Time to Empty", 'CFNumberRef')()
        -- if source("Power Source State", 'CFStringRef')() == 'AC Power' then end
        charging = time == 0
      else
        time = source("Time to Full Charge", 'CFNumberRef')()
      end
    end

    CFRelease(blob)
    CFRelease(sources)

    return capacity, time, charging
  end
}

opts = {
  bright = true,
  colors = 'ansi',
  order = 'fwaic',
  width = 38,
  rgb = false,
  battery = true,
  ['battery-time'] = false,
}

local function parseopts(opts)
  -- add a help option that prints the options of the program with help strings
  opts["-h,--help:print this help information"] = function()
    print("Usage: " .. arg[0]:gsub("/.*/", '') .. (opts.usage or " [options]"))

    local out, flaglen = {}, 0
    for opt in pairs(opts) do
      local flags, msg = opt:match('(.-):(.*)')
      flags = (flags or opt):gsub(',', ', ')
      if #flags > flaglen then flaglen = #flags end
      out[flags] = msg or ''
    end

    for opt, msg in pairs(out) do
      print(opt .. (' '):rep(flaglen - #opt + 1) .. msg)
    end

    os.exit()
  end

  local variations, converters = {}, {
    id = function(_) return _ end,
    num = function(_, name)
      local result = tonumber(_)
      if result then return result end
      io.stderr:write(name .. " takes a number\n")
      os.exit(1)
    end,
  }

  for opt, fun in pairs(opts) do
    -- only parse options, i.e. --? style options
    if opt:sub(1, 1) ~= '-' then goto next end

    -- remove the help text on the option
    opt = opt:match('(.*):') or opt

    for opt in opt:split(',') do
      local converter, extra, varopt = {'none', fun}

      -- see if option has an argument of a given format
      varopt, extra = opt:match("(.-)=(%b<>)")

      -- see if option has an argument with no given format, identity is assumed
      if not varopt then varopt, extra = opt:match("(.-)="), "<id>" end

      -- store if option requires argument with converting function
      if varopt then
        opt = varopt -- the rest of the loop needs the raw option without =<>
        converter[1] = converters[extra:sub(2,-2)] or converters.id
      end

      -- look to see if option has an optional part in [] that let the option
      -- vary, ex: --[no-]bright can be --bright or --no-bright
      varopt = opt:match('%b[]')
      if varopt then
        variations[opt:gsub("%b[]", varopt:sub(2, -2))] = converter
        variations[opt:gsub("%b[]", '')] = converter
      else
        variations[opt] = converter
      end
    end

    ::next::
  end

  local skip = false
  for i, a in ipairs(arg) do
    local opt, val = a:match("(.-)=(.*)")

    -- used when this value was consumed by the previous option
    if skip then skip = false; goto next end
    if val == '' then val = nil end

    for var, _ in pairs(variations) do
      if (opt or a) == var then
        local conv, fun = table.unpack(_)
        if conv == 'none' then
          fun(var)
        else
          if not val and arg[i + 1] then val = arg[i + 1] end
          if not val then print(var .. ': missing option argument'); os.exit(1) end
          skip = true
          fun(conv(val, var), var)
        end
      end
    end

    ::next::
  end
end

local bars, history, mem = {}, {}, memory()
for i = 1, 8 do table.insert(bars, string.char(226, 150, 128 + i)) end

parseopts({
  ["--[no-]bright:use bright colors for cpu metrics"] =
    function(opt) opts.bright = opt == "--bright" end,
  ["--tmux:output using tmux colors"] = function() opts.colors = 'tmux' end,
  ["--width=<num>:width of output graph (default " .. opts.width .. ")"] =
    function(opt) opts.width = opt end,
  ["--order=<string>:order to show memory sections in (default " ..
    opts.order .. ")"] = function(opt) opts.order = opt end,
  ["--rgb=<num>:use 256 color palette to render foreground with 1..5 \z
    intensity (try 4)"] = function(_) opts.rgb = _ end,
  ["--[no-]battery:hide or show battery status (default " ..
    tostring(opts.battery) .. ")"] = function(_) opts.battery = _ == "--battery" end,
  ["--[no-]battery-time:hide or show battery (de)charge time (default " ..
    tostring(opts['battery-time']) .. ")"] =
    function(_) opts['battery-time'] = _ == "--battery-time" end
})

-- Slightly overkill OS Environment access and setting but great for reuse
local ENV = {}
ffi.cdef [[
  char * getenv(const char *);
  int setenv(const char *, const char *, int);
]]
setmetatable(ENV, {
  __index = function(self, k)
    local val = ffi.string(getenv(k))
    rawset(self, k, val)
    return val
  end,
  __newindex = function(self, k, v)
    if setenv(k, v, 1) == 0 then rawset(self, k, v) end
  end
})

local colors, cmap = {
  black         = {
    ansi = { bg = 0, fg = 0 },
    rgb = { 0, 0, 0 }
  },
  green         = {
    ansi = { bg = 42, fg  = 32 },
    rgb = { 0, 1, 0 },
  },
  bright_green  = { ansi = { bg = 102, fg = 92 },
  },
  red           = {
    ansi = { bg = 41, fg  = 31 },
    rgb = { 1, 0, 0 },
  },
  bright_red    = { ansi = { bg = 101, fg = 91 }, },
  yellow        = {
    ansi = { bg = 43, fg  = 33 },
    rgb = { 1, 1, 0 },
  },
  bright_yellow = { ansi = { bg = 103, fg = 93 }, },
  blue          = {
    ansi = { bg = 44, fg  = 34 },
    rgb = { 0, 0, 1 }
  },
  bright_blue   = { ansi = { bg = 104, fg = 94 }, },
  cyan          = {
    ansi = { bg = 46, fg  = 36 },
    rgb = { 0, 1, 1 }
  },
  bright_cyan   = { ansi = { bg = 106, fg = 96 }, },
}, {
  f = "green",
  w = "red",
  a = "yellow",
  i = "blue",
  c = "cyan",
}

for k, v in pairs(colors) do
  local tmux_color, color = k:gsub("_", ''), colors[k].rgb
  colors[k].tmux = {}

  if opts.rgb and color then
    local fg = 16 + 36 * color[1] * opts.rgb + 6 * color[2] * opts.rgb + color[3] * opts.rgb
    colors[k].tmux.fg = "#[fg=colour" .. fg .. "]"
    colors[k].ansi.fg = "\27[38;5;" .. fg .. "m"
  else
    colors[k].tmux.fg ="#[fg=" .. tmux_color .. "]"
    colors[k].ansi.fg = "\27[" .. colors[k].ansi.fg .. "m"
  end

  colors[k].tmux.bg = "#[bg=" .. tmux_color .. "]"
  colors[k].ansi.bg = "\27[" .. colors[k].ansi.bg .. "m"
end

-- get the saved history, creating the storage if not created yet
local file = io.open(ENV.HOME .. '/.usage.dat', 'r')
if not file then
  file = io.open(ENV.HOME .. '/.usage.dat', 'w')
  file:close(); file = io.open(ENV.HOME .. '/.usage.dat', 'r')
end
for line in file:lines() do table.insert(history, tonumber(line)) end
file:close()

-- store the new usage value and remove old entries
history[#history + 1] = usage()
for i = 1, #history - opts.width do table.remove(history, 1) end

local memscale = opts.width / sum(mem)
local norm = (#bars - 1) / 1.0 -- math.max(table.unpack(history))

local function color(name, kind)
  local color = colors[name][opts.colors][kind]
  if kind == 'fg' then
    color = opts.rgb and '' or opts.bright and 'bright_' or ''
    color = colors[color .. name][opts.colors][kind]
  end
  return color
end

--[[
  From the end of the graph to be generated calculate the transitions between
  the colors for each memory slice. The transition point is then inserted into
  the history line as a table of color and cpu usages which can be detected
  when printing.
--]]
local idx = opts.width
for i = 1, opts.width - #history do table.insert(history, 1, 0) end
for str in opts.order:reverse():gmatch("%w") do
  -- skip this memory attribute if the platform doesn't support it
  if not mem[str] then goto next end

  -- caculate the number of cpu usage ticks needed to represent this memory
  -- slice and jump back on graph to insert starting color point
  idx = idx - math.round(memscale * mem[str])

  -- ensure we don't go beyond the start of the graph because of rounding
  if idx < 1 then idx = 1 end

  -- if we are over writing a spot with our new value, that means it was too
  -- small to actually represent on the graph, e.g. free memory is almost non
  -- existant
  if type(history[idx]) ~= 'table' then
    history[idx] = {
      color = color(cmap[str], 'fg') .. color(cmap[str], 'bg'),
      usage = history[idx],
    }
  end

  ::next::
end

local parts = {}
local name
for name in os.tmpname():split('/') do table.insert(parts, name) end
local tmpfile = ENV.HOME .. '/.usage.dat_' .. parts[#parts]
file = io.open(tmpfile, 'w')

for i, val in ipairs(history) do
  if type(val) == 'table' then
    io.stdout:write(val.color)
    val = val.usage
  end
  file:write(tostring(val) .. "\n")
  io.stdout:write(bars[math.round(norm * val) + 1])
end
file:close()
os.rename(tmpfile, ENV.HOME .. '/.usage.dat')

io.stdout:write(color('black', 'bg'))

if opts.battery and battery[ffi.os] then
  local capacity, time, charging, color = battery[ffi.os]()
  -- local color = color(charging and 'green' or 'red', 'fg')

  if charging then
    color = opts.colors == 'tmux' and '#[fg=green]' or '\27[32m'
  else
    color = opts.colors == 'tmux' and '#[fg=red]' or "\27[31m"
  end

  if capacity then
    io.stdout:write(color, '|', bars[math.round((#bars - 1) * capacity)])
    if opts['battery-time'] and time > 0 then
      io.stdout:write(' ', ("%02d:%02d"):format(time / 60, time % 60))
    end
  end
end

-- vim: set ft=lua:
