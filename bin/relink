#!/usr/bin/env sh
set -- $(getopt n "$@")

while true; do
  case $1 in
    -n)
      DRY_RUN=true; shift; continue
      ;;
    --)
      break
      ;;
    *)
      echo "Unknown option \"$1\""
      exit 1
      ;;
  esac
done

set -- "$@"

case $(uname -s) in
  [dD]arwin*)
    PLATFORM=darwin
    ;;
  [lL]inux*)
    PLATFORM=linux
    ;;
  *[cC]ygwin*)
    PLATFORM=cygwin
    ;;
  *)
    ;;
esac

link() {
  src=".dotfiles/$file"
  dest="$HOME/.$file"

  if [ -e "$dest" -a "$(readlink "$dest")" = "$src" ]; then
    return
  fi

  printf "Linking %s -> %s\n" "$(echo $dest | sed -e "s:$HOME:~:")" "$src"
  if [ -d $file ]; then
    if [ -z "$DRY_RUN" ]; then
      ln -sf "$src" "$dest"
    fi
  else
    if [ -z "$DRY_RUN" ]; then
      ln -sf "$src" "$dest"
    fi
  fi

  unset src
  unset dest
}

test_link() {
  if command -v "$1" > /dev/null 2>&1; then
    link "$2"
  fi
}

platform_link() {
  if [ $PLATFORM = $1 ]; then
    link "$2"
  fi
}

dotfiles="$HOME/.dotfiles"

###########################################################################
#                      Remove All links to dotfiles                       #
###########################################################################
for file in $HOME/.*; do
  if [ -h "$file" ]; then
    case "$(readlink "$file")" in
      .dotfiles/*)
        echo "Removing link $file"
        if [ -z "$DRY_RUN" ]; then
          rm -f "$file"
        fi
        ;;
    esac
  fi
  # Removes only broken links
  # if [ -h "$file" -a ! -e "$file" ]; then
  #   printf "Removing broken link %s\n" "$file"
  #   if [ -z "$DRY_RUN" ]; then
  #     rm -f "$file"
  #   fi
  # fi
done

for file in "$dotfiles"/*; do
  file="$(basename "$file")"
  case $file in
    Readme.md|js|os|zsh|irb|vim|gitignore|fonts)
      ;;
    bootstrap.sh|helpers.rb)
      ;;
    editrc)
      platform_link darwin "$file"
      ;;
    ctags)
      test_link ctags "$file"
      ;;
    gvimrc)
      test_link gvim "$file"
      test_link mvim "$file"
      ;;
    tmux.conf)
      test_link tmux "$file"
      ;;
    irbrc|pryrc|rspec|rdebugrc|gemrc)
      test_link ruby "$file"
      ;;
    *.erb)
      if [ -f  "$HOME/.${file%.*}" -a -z "$DRY_RUN" ]; then
        rm "$HOME/.${file%.*}"
      fi
      GENERATE=
      case ${file%.*} in
        gitconfig)
          if command -v git > /dev/null 2>&1; then
            GENERATE=true
          fi
          ;;
      esac
      if [ -n "$GENERATE" ]; then
        if command -v erb > /dev/null 2>&1; then
          echo "Generating ~/.${file%.*}"
          if [ -z "$DRY_RUN" ]; then
            ASDF_RUBY_VERSION=system erb -r "$dotfiles/helpers" "$dotfiles/$file" > "$HOME/.${file%.*}"
          fi
        fi
      fi
      unset GENERATE
      ;;
    config)
      link "$file"
      ;;
    ssh)
      if [ -d "$HOME/.$file" -a ! -h "$HOME/.$file" -a -z "$DRY_RUN" ]; then
        cp -a ~/.ssh/* ssh/
        rm -rf ~/.ssh/
      fi
      link "$file"
      ;;
    *)
      link "$file"
      ;;
  esac
done
