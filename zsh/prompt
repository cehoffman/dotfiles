# Keep the right side of prompt flush with terminal
export ZLE_RPROMPT_INDENT=0

function set_cursor {
  if [[ -n "$TMUX" ]]; then
    [[ -n "$ITERM_PROFILE" ]] && print -Pn "\ePtmux;\e\e]50;CursorShape=${1:-0}\a\e\\"
  else
    [[ -n "$ITERM_PROFILE" ]] && print -Pn "\e]50;CursorShape=${1:-0}\a"
  fi
}

__prompt_mode_insert="%B%F{blue}i%{$reset_color%}"
__prompt_mode_cmd="%B%F{yellow}n%{$reset_color%}"
__prompt_mode=$__prompt_mode_insert
function zle-keymap-select {
  # Only update the prompt if mode actually changed
  # This prevents the prompt from jumping up a line when
  # issuing commands that go through several keymaps, e.g.
  # cc will go vicmd -> opp -> main
  setopt localoptions no_ksharrays
  [[ "${@[2]-}" == opp ]] && return

  if [[ "$KEYMAP" == 'vicmd' || "$KEYMAP" == 'opp' ]]; then
    __prompt_mode=$__prompt_mode_cmd
    # set_cursor 0
  else
    __prompt_mode=$__prompt_mode_insert
    # set_cursor 1
  fi

  zle .reset-prompt
}
zle -N zle-keymap-select

# The following is just a sham of a hack to get around a problem with multiline
# prompt drawing in when running inside tmux and the executing command scrolls
# causes the window to scroll up. The first character of the 2nd line in the
# prompt when that character is not a normal a-z or A-Z will be drawn in the
# place of the first character of the first line. Reseting the prompt causes it
# to be drawn properly. I think this is an issue in TMUX not actually moving
# the cursor down when it has scrolled the window up for the 2nd line. Why it
# only fails on none alphabetical characters (numbers untested) is a mystery
function zle-line-init {
  zle .reset-prompt
}

if [[ -n "TMUX" ]]; then
  zle -N zle-line-init
fi

function zle-line-finish {
  __prompt_mode=$__prompt_mode_insert
  # set_cursor 1
}
zle -N zle-line-finish

autoload -Uz regexp-replace

function update_rprompt() {
  emulate -L zsh
  # Prepare to reprint the prompt
  local rprompt=${(%%)RPROMPT}
  local rpromptsize=$rprompt

  # Strip color codes from prompt to get real size
  unsetopt RE_MATCH_PCRE
  regexp-replace rpromptsize "\[([0-9]{1,2}(;[0-9]{1,2}(;[0-9]{1,3})?)?)?[m|K]"

  # Go back to the start of current prompt and reprint it
  echo -ne "\e[A\e[$(( $COLUMNS - $#rpromptsize + 1 ))G$rprompt\e[B\e[G"
}
preexec_functions+=update_rprompt

function {
  local red="%b%F{red}"
  local bold_red="%B%F{red}"
  local blue="%b%F{blue}"
  local black="%b%F{237}"
  local bold_black="%B%F{black}"
  local yellow="%b%F{yellow}"
  local bold_yellow="%B%F{yellow}"
  local white="%b%F{white}"
  local magenta="%b%F{magenta}"
  local bold_magenta="%B%F{magenta}"
  local cyan="%b%F{cyan}"
  local bold_cyan="%B%F{cyan}"
  local green="%b%F{green}"
  local reset="%s%b%k%f"

  # local ul="%(!.$red.$black)‚é°"
  # local ll="%(!.$red.$black)‚é£"
  # local ur="%(!.$red.$black)‚é§"
  # local lr="%(!.$red.$black)‚é¶"
  local open="%(!.$red‚ü®.)"
  local close="%(!.$red‚ü©.)"
  # local ul="%(!.$red.$black)‚îå"
  # local ll="%(!.$red.$black)‚îî"
  # local ur="%(!.$red.$black)‚îê"
  # local lr="%(!.$red.$black)‚îò"
  # local open="%(!.$red‚îÄ‚ù∞.$black‚îÄÔΩ¢)"
  # local close="%(!.$red‚ù±.$blackÔΩ£)‚îÄ"

  local name="%(!.$bold_magenta.$blue)%n$bold_cyan"
  local last_exit="${bold_red}%(?..E:%? )"

  PROMPT="$ul$open$red%m$reset:%\$_pr_pwdlen<‚Ä¶<\$_pr_pwd%<<$close\$_pr_fillwidth\${_pr_extras:+$open$reset\${(j: :)_pr_extras}$close$ur"$'\n'"$ll$open$last_exit\${(j: :)_pr_short_extras}\${_pr_short_extras:+ }\$__prompt_mode$close%(!.$red.$black)‚é¨$reset¬†"
  # PROMPT="$ll$open$last_exit\${(j: :)_pr_short_extras}\${_pr_short_extras:+ }\$__prompt_mode$close%(!.$red.$black)‚é¨$reset¬†"
  RPROMPT=" $open$reset%D{%H:%M} ${bold_cyan}on$reset %D{%a %b %d}$close\${_pr_extras:+${(qqq)lr}}$reset"
  PS2="$open$bold_cyan%_$close$reset "
  PROMPT_EOL_MARK="%b%F{77}¬ß$reset"
}

autoload -Uz vcs_info

zstyle ':vcs_info:*' stagedstr '%B%F{green}+'
zstyle ':vcs_info:*' unstagedstr '%F{yellow}‚ô∫'
zstyle ':vcs_info:*' untrackedstr '%B%F{red}‚ú±%%b'
zstyle ':vcs_info:*' aheadstr '%B%F{green}‚Üë%x'
zstyle ':vcs_info:*' behindstr '%B%F{red}‚Üì%z'
zstyle ':vcs_info:*' divergedstr '%B%F{magenta}‚Üì%x‚Üë%z'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' use-prompt-escapes true
zstyle ':vcs_info:*' max-exports 2
zstyle ':vcs_info:*' enable git svn

# Define some hooks for the git backend to collect some more information on the repo
# zstyle ':vcs_info:*+*:*' debug true
zstyle ':vcs_info:(git|git-svn)+pre-get-data:*' hooks git-untracked
zstyle ':vcs_info:*+set-message:*' hooks git-message

# The first prompt info is for top right prompt info. The second is the bottom
# left short information for prompt
zstyle ':vcs_info:git:*' symbol '%F{cyan}¬±'
zstyle ':vcs_info:git-svn:*' symbol '%F{blue}·µª'
zstyle ':vcs_info:(git|svn)(|-svn):*' formats '%%b%v:%b' '%%b%v:%c%u%o%w%y%d'
zstyle ':vcs_info:(git|svn)(|-svn):*' actionformats '%%b%v:%b%F{white}(%B%a%%b)' '%%b%v:%c%u%o%w%y%d%F{white}(%B%a%%b)'

zstyle ':vcs_info:svn+pre-get-data:*' hooks svn-changes
zstyle ':vcs_info:svn:*' symbol '%F{yellow}·µª'
zstyle ':vcs_info:svn:*' branchformat '%b@%r'

function +vi-svn-changes() {
  if [[ ! -z "$(svn status -q)" ]]; then
    zstyle -s ":vcs_info:$vcs:*" unstagedstr 'user_data[unstaged]'
  fi
  user_data[untracked]=$(svn status 2> /dev/null | grep '^?' &> /dev/null ; echo $(( ! $? )))
}

function +vi-git-untracked() {
  # To get if there are any staged changes
  # $(git diff-index --quite --cached HEAD)
  # To get if there are any unstaged changes (0 == no difference, 1 == difference)
  # $(git diff-files --quiet)
  user_data[ahead]=$(git rev-list HEAD@{upstream}..HEAD 2> /dev/null)
  user_data[behind]=$(git rev-list HEAD..HEAD@{upstream} 2> /dev/null)
  [[ -z $user_data[ahead] || -z $user_data[behind] ]]; user_data[diverged]=$?
  # Only run this on platforms other than cygwin because it is horribly slow
  # there
  if [[ $IS_CYGWIN != 0 ]]; then
    git ls-files --exclude-standard --others --error-unmatch . &> /dev/null
    user_data[untracked]=$?
  fi
}

function +vi-git-message {
  local format
  # Pick which format string is needed
  if [[ -n $hook_com[action] ]]; then
    zstyle -a ":vcs_info:$vcs:*" actionformats format
  else
    zstyle -a ":vcs_info:$vcs:*" formats format
  fi
  format=$format[$(( $1 + 1 ))]

  [[ -z $format ]] && return

  local -a escapes
  local -A map
  map=('o' diverged 'w' ahead 'x' ahead_count 'y' behind 'z' behind_count
       'd' untracked 'v' vcs_symbol 'b' branch 'a' action 'R' base 'r'
       base-name 'S' subdir 'c' staged 'u' unstaged 'i' revision 'm' misc
       's' vcs)
  escapes=${(j::)${(k)map[*]}}

  # Get the custom symbol to represent this vcs system
  zstyle -s ":vcs_info:$vcs:*" symbol 'hook_com[vcs_symbol]'

  # Only load the untracked string if needed
  if [[ $user_data[untracked] -eq 0 ]]; then
    zstyle -s ":vcs_info:$vcs:*" untrackedstr 'hook_com[untracked]'
  fi

  # Load upstream statuses
  if [[ -n $user_data[ahead] ]]; then
    zstyle -s ":vcs_info:$vcs:*" aheadstr 'hook_com[ahead]'
    hook_com[ahead_count]=${(w)#user_data[ahead]}
  fi
  if [[ -n $user_data[behind] ]]; then
    zstyle -s ":vcs_info:$vcs:*" behindstr 'hook_com[behind]'
    hook_com[behind_count]=${(w)#user_data[behind]}
  fi

  # When diverged remove the behind and ahead strings because diverged
  # will take precedence
  if [[ $user_data[diverged] -eq 1 ]]; then
    zstyle -s ":vcs_info:$vcs:*" divergedstr 'hook_com[diverged]'
    unset "hook_com[ahead]"
    unset "hook_com[behind]"
  fi

  if [[ -n $user_data[unstaged] ]]; then
    hook_com[unstaged]=$user_data[unstaged]
  fi

  # Build the replacement message ourself
  hook_com[message]=$format
  local temp
  while true; do
    # Store a temp copy of message to allow early breakout of loop
    temp=$hook_com[message]

    # Replace all escapes with actual values
    hook_com[message]=${hook_com[message]//(#b)([^\%])\%([$escapes])/$match[1]$hook_com[$map[$match[2]]]}
    # For if the pcre extension ever supports uft-8 chars...
    # regexp-replace "hook_com[message]" "(?<!%)%([${(j::)${(k)map[*]}}])" '$hook_com[$map[$match[1]]]'

    # Exit early if no changes occuring
    [[ $hook_com[message] = $temp ]] && break
  done
  hook_com[message]=${hook_com[message]//\%\%/\%}

  ret=1
}

# Initialize the vcs information on each prompt
precmd_functions+=vcs_info

function _prompt_precmd {
  # These hold a variable list of extra information depending on context. These
  # arrays hold each piece of information that will be displayed in the top
  # right prompt.
  local tempinfo
  typeset -ga _pr_extras
  typeset -ga _pr_short_extras
  _pr_short_extras=()
  _pr_extras=()

  # Reinitialize the global variables that will be substitued into the
  # prompt when it is displayed.
  typeset -g _pr_pwd=''
  typeset -g _pr_pwdlen=''
  typeset -g _pr_fillwidth=''

  if [[ -n $vcs_info_msg_0_ ]]; then
    _pr_extras+=$vcs_info_msg_0_
    _pr_short_extras+=$vcs_info_msg_1_
  fi

  # _pr_extras+="%{$fg_no_bold[magenta]%}P:$(process-tree)"

  if [[ -n $vcs_info_msg_0_ ]]; then
    local groot="$(git rev-parse --show-toplevel)"
    local lang
    local marker
    local -A markers=(ruby "Gemfile" python "setup.py|pyproject.toml" nodejs "package.json" elixir "mix.exs")
    local testfile
    local testpath

    for testpath in ${(s[/])${PWD##$groot}} ''; do
      for lang in ${(k)markers}; do
        for testfile in ${(s/|/)markers[$lang]}
          if [[ -e "${groot}/${testpath}/${testfile}" ]]; then
            _pr_extras+="%{$fg_no_bold[${ENV_LANGS[$lang]}]%}${(U)lang[1]}:$(eval "echo \$__cur_${lang}_version")"
            break
          fi
      done
    done
  fi

  if [[ (( $+commands[kubectl] )) && (( $+commands[jq] )) && -d ~/.kube/configs ]]; then
    _pr_extras+="%{$fg_no_bold[blue]%}‚éà:$(kubectl config view --minify -o json | jq -r '.contexts | first.context | .user + "@" + .cluster + "/" + (.namespace // "default")')"
  fi

  tempinfo="%j"
  tempinfo=${(%)tempinfo}
  if [[ $tempinfo > 0 ]]; then
    tempinfo="%{$fg_no_bold[cyan]%}J:$tempinfo"
    # _pr_extras+=$tempinfo
    _pr_short_extras+=$tempinfo
  fi

  if [[ $IS_MAC = 0 ]]; then
    local output; output=$(ioreg -rc AppleSmartBattery)
    if [[ -n $output ]]; then
      local batcolor
      local batmax
      local batshort

      [[ $output =~ "MaxCapacity.*?(\d+)" ]]
      batmax=$match[1]
      [[ $output =~ "CurrentCapacity.*?(\d+)" ]]
      ((tempinfo = ($match[1] * 100) / $batmax))
      [[ $match[1] -lt $batmax ]] && ((tempinfo = $tempinfo + 1))

      if [[ $tempinfo -gt 85 ]]; then
        batcolor="%{$fg_bold[green]%}"
      elif [[ $tempinfo -gt 65 ]]; then
        batcolor="%{$fg_no_bold[green]%}"
      elif [[ $tempinfo -gt 45 ]]; then
        batcolor="%{$fg_no_bold[yellow]%}"
      elif [[ $tempinfo -gt 25 ]]; then
        batcolor="%{$fg_bold[yellow]%}"
      elif [[ $tempinfo -gt 10 ]]; then
        batcolor="%{$fg_no_bold[red]%}"
      else
        batcolor="%{$fg_bold[red]%}"
      fi

      if [[ $output =~ "IsCharging.*?Yes" ]]; then
        batshort="$batcolor‚à¥:‚Üë%{$reset_color%}"
      elif [[ $output =~ "ExternalConnected.*?No" ]]; then
        batshort="$batcolor‚à¥:‚Üì%{$reset_color%}"
      fi

      if [[ -z $batshort ]]; then
        tempinfo="‚à¥:$tempinfo%%"
      else
        tempinfo="‚à¥:$tempinfo%%"

        [[ $output =~ "TimeRemaining.*?(\d+)" ]]
        tempinfo="$tempinfo($(printf "%02i:%02i" $(($match[1] / 60)) $(($match[1] - ($match[1] / 60 ) * 60))))"
      fi

      _pr_extras+="$batcolor$tempinfo"
      [[ -n $batshort ]] && _pr_short_extras+=$batshort
    fi
  fi

  # Color the path differently when the current directory is/isn't writeable
  _pr_pwd=${PWD/$HOME/\~}
  local pwdsize=$#_pr_pwd
  if [[ -w $PWD ]]; then
    _pr_pwd="%{$reset_color%}$_pr_pwd"
  else
    _pr_pwd="%{$fg[yellow]%}$_pr_pwd%{$reset_color%}"
  fi

  # Calculate how much the fill size will need to be or if the path will
  # need to be truncated to fit the first line of prompt
  # local promptsize=${#${(%):---(%n@%m:)---(${(j: :)infos})--}}
  local promptsize
  _pr_fillwidth=''
  function calc_promptsize() {
    emulate -L zsh
    setopt RE_MATCH_PCRE
    # regexp-replace promptsize "%[KF1BbkfsS]({\w+?})?"
    promptsize=${${(S%%)PROMPT}//\~/b}
    promptsize=${${(ps:\n:)promptsize}[1]}
    regexp-replace promptsize "\[([0-9]{1,2}(;[0-9]{1,2}(;[0-9]{1,3})?)?)?[m|K]"
    promptsize=$(( $#promptsize - $pwdsize + 1 ))
  }
  calc_promptsize

  for tempinfo in {1..$#extras}; do
    if (($COLUMNS - $promptsize > 5)); then
      break
    else
      # Assumes that the last item put on the list is the most imporant
      # one to try and keep so shifts the earlier ones out
      _pr_extras=($_pr_extras[1,-2])
      calc_promptsize
    fi
  done

  if (($promptsize + $pwdsize > $COLUMNS)); then
    ((_pr_pwdlen = $COLUMNS - $promptsize + 1))
  else
    _pr_fillwidth="${(l.(($COLUMNS - ($promptsize + $pwdsize) + 1)).. .)}"
  fi
}
precmd_functions+=_prompt_precmd

# vim: ft=zsh :
