function parse_git_dirty () {
  # if [[ -n $(git status -s 2> /dev/null) ]]; then
  #   echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  # else
  #   echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  # fi
  typeset -g __pr_git_branch=""
  typeset -g __pr_git_status=""
  typeset -g __pr_git_clean=""
  typeset -g __pr_git_dirty=""

  local st="$(git status --ignore-submodules=untracked 2>/dev/null)"
  if [[ -n "$st" ]]; then
    local -a arr
    arr=(${(f)st})

    if [[ ! $arr[1] =~ 'Not currently on any branch.' ]]; then
      __pr_git_branch="${arr[1][(w)4]}"
    fi

    if [[ $arr[2] =~ 'Your branch' ]]; then
      if [[ $arr[2] =~ 'ahead' ]]; then
        __pr_git_status="$ZSH_THEME_GIT_PROMPT_AHEAD"
      elif [[ $arr[2] =~ 'diverged' ]]; then
        __pr_git_status="$ZSH_THEME_GIT_PROMPT_DIVERGED"
      else
        __pr_git_status="$ZSH_THEME_GIT_PROMPT_BEHIND"
      fi
    fi

    if [[ $st =~ 'nothing to commit' ]]; then
      __pr_git_clean="$ZSH_THEME_GIT_PROMPT_CLEAN"
    else
      __pr_git_dirty="$ZSH_THEME_GIT_PROMPT_DIRTY"
    fi
  fi
}

function precmd_update_git_vars() {
  if [ -n "$__EXECUTED_GIT_COMMAND" ]; then
    parse_git_dirty
    unset __EXECUTED_GIT_COMMAND
  fi
}

function preexec_update_git_vars() {
  case "$1" in 
    git*)
      typeset -g __EXECUTED_GIT_COMMAND=1
    ;;
  esac
}

preexec_functions+=preexec_update_git_vars
precmd_functions+=precmd_update_git_vars
chpwd_functions+=parse_git_dirty

# Suggested completion style from _git completion
zstyle ':completion::*:git-{name-rev,add,rm}:*' ignore-line true
zstyle ':completion:*:*:git:*' user-commands 'submodule:initialize, update or inspect submodules'

# vim: filetype=zsh
