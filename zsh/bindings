# Use vi keybindings to edit command line
bindkey -v

# Let _expand do expansion instead of shell
bindkey -M viins '	' complete-word
bindkey -M vicmd '	' complete-word

# Make backspace work
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char

# Setup undo redo in cmd
bindkey -M vicmd '^r' redo
bindkey -M vicmd 'u' undo

# Make sure that C-M vicmd and C-e do the appropriate things
# Discovered this when using zsh inside a tmux that was inside
# another tmux. It would just print ^A or ^E instead of doing
# the action
bindkey -M viins '^A' beginning-of-line
bindkey -M viins '^E' end-of-line

# Make C-e and C-M vicmd goto insert mode from command
# bindkey -M vicmd '^A' vi-insert-bol
# bindkey -M vicmd '^E' vi-add-eol

# Alias C-n and C-p to up and down arrow
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
bindkey 'OA' history-beginning-search-backward
bindkey 'OB' history-beginning-search-forward

# Make autocomplete cycling work like in vim
bindkey -M menuselect '^P' reverse-menu-complete
bindkey -M menuselect '^N' menu-complete
bindkey -M menuselect 'OA' reverse-menu-complete
bindkey -M menuselect 'OB' menu-complete

# Make G go to the end of history
bindkey -M vicmd 'G' end-of-history

# Make Y like D and C
bindkey -M vicmd 'Y' vi-yank-eol

# Expansion of history
bindkey ' ' magic-space

# Allow editing a command inside the editor
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# Better movement on the line
# bindkey '^b' backward-word
# bindkey '^f' forward-word
# bindkey '^d' delete-word
# bindkey '^u' kill-whole-line

# Insert literal characters
bindkey -M viins '^v' vi-quoted-insert
bindkey -M vicmd 'cru' up-case-word

# This just want bound right, it sucked
bindkey -M vicmd '~' vi-swap-case

# Same reason as the cc, zsh seems to have problems with the repeats
bindkey -M vicmd 'yy' vi-yank-whole-line

# A nice try, but hasn't been useful yet
bindkey -M vicmd 'z=' spell-word

# Because this sometimes doesn't work as it should with vi-change
bindkey -M vicmd 'cc' vi-change-whole-line

# Make it really simple to forground that last suspended process before last
# This makes it real simple to suspend vim, resume something else, suspend it and resume vim
bindkey -s '^f' ' fg %-'

# Much quicker switch to vicmd mode
# It will remove all bindings that start with  except the one that is 
bindkey -rpM viins '^['

# run command line as user root via sudo:
function sudo-command-line() {
  [[ -z $BUFFER ]] && zle up-history
  if [[ $BUFFER != sudo\ * ]]; then
      BUFFER="sudo $BUFFER"
      CURSOR=$(( CURSOR+5 ))
  fi
}
zle -N sudo-command-line

bindkey "^Xs" sudo-command-line

# Make it easy to remove directory components when deleting words
function slash-backward-kill-word() {
  local WORDCHARS="${WORDCHARS:s#/#}"
  zle backward-delete-word
}
zle -N slash-backward-kill-word

bindkey '^W' slash-backward-kill-word

# Create path at cursor or in visual selection
function inplace-mkdirs() {
  local PATHTOMKDIR
  if ((REGION_ACTIVE==1)); then
    local F=$MARK T=$CURSOR
    if [[ $F -gt $T ]]; then
      F=${CURSOR}
      T=${MARK}
    fi
    # get marked area from buffer and eliminate whitespace
    PATHTOMKDIR=${BUFFER[F+1,T]%%[[:space:]]##}
    PATHTOMKDIR=${PATHTOMKDIR##[[:space:]]##}
  else
    local bufwords iword
    bufwords=(${(z)LBUFFER})
    iword=${#bufwords}
    bufwords=(${(z)BUFFER})
    PATHTOMKDIR="$bufwords[iword]"
  fi
  # Do file name expansion and globbing as command line
  # would do when executing it normally
  PATHTOMKDIR=${~PATHTOMKDIR}
  [[ -z "${PATHTOMKDIR}" ]] && return 1
  if [[ -e "${PATHTOMKDIR}" ]]; then
    zle -M " path already exists, doing nothing"
  else
    zle -M "$(mkdir -p -v "${PATHTOMKDIR}")"
    zle end-of-line
  fi
}

zle -N inplace-mkdirs
bindkey '^Xm' inplace-mkdirs

# vim: ft=zsh
